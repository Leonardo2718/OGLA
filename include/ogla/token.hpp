/*
Project: OGLA
File: token.hpp
Author: Leonardo Banderali
Created: July 7, 2015
Last Modified: December 17, 2015

Description:
    A `Token` is a unit of analyzed text and is identified using a `Rule`.  These form the basic building blocks of the
    OGLA lexcial analyzer.  Tokens should be immutable as they represent the result of a computation (lexical analysis).

Copyright (C) 2015 Leonardo Banderali
Distributed under the Boost Software License, Version 1.0.
(See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

*/

#ifndef OGLA_TOKEN_HPP
#define OGLA_TOKEN_HPP

// c++ standard libraries
#include <string>
#include <vector>
#include <regex>

// project headers
#include "rule.hpp"

//~forward declare namespace members~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

namespace ogla {

template <typename TokenType> class BasicToken; // type representing a token in analyzed text

/*
Convenience function that constructs and returns a `BasicToken` object.
*/
template <typename TokenType> BasicToken<TokenType>
make_token(const TokenType& tokenType, const std::smatch& match, int pos);

template <typename TokenType>
using BasicTokenList = std::vector<BasicToken<TokenType>>;

}   // `ogla` namepsace



/*
As the name suggests, `Token` is a class that represents a token.  Tokens are generated by a lexer using rules.
For the sake of generality, an instance of this class only containes basic information about a token, including:
its name (or category), its corresponding lexeme, and its position in the text (which may be specified optionally).
Any other information needed must be extracted by the user from the lexeme and other information already provided.
This essentailly offloads the work of learning the value of a token to an other tool such as a parser or semantic
analyzer.
*/
template <typename TokenType>
class ogla::BasicToken {
    public:
        BasicToken() = default;
        //BasicToken(const std::string& _tokenType, const std::smatch& _match, int _pos = -1)
        BasicToken(TokenType _tokenType, const std::smatch& _match, int _pos = -1)
            :tokenType{_tokenType}, match{_match}, pos{_pos} {}

        bool empty() const;
        /*  returns true if the token is the result of an empty match (search result is empty) */

        //std::string type() const;
        TokenType type() const;
        /*  returns the type of the token */

        int position() const;
        /*  returns the specifed position of the token within the text searched (-1 is "no/don't care position") */

        std::string lexeme() const;
        /*  returns the lexeme of this token */

        bool operator==(const BasicToken& other) const;

        bool operator!=(const BasicToken& other) const;

    private:
        //std::string tokenType;
        TokenType tokenType;
        std::smatch match;  // the matched lexeme associated with the token
        int pos = -1;       // the assigned position of the token in the text (-1 is "no/don't care position")
};

/*
returns true if the token is the result of an empty match (search result is empty)
*/
template <typename TokenType>
bool ogla::BasicToken<TokenType>::empty() const {
    return match.empty();
}

/*
returns the type of the token
*/
template <typename TokenType>
TokenType ogla::BasicToken<TokenType>::type() const {
    return tokenType;
}

/*
returns the specifed position of the token within the text searched (-1 is "no/don't care position")
*/
template <typename TokenType>
int ogla::BasicToken<TokenType>::position() const {
    return pos;
}

/*
returns the lexeme of this token
*/
template <typename TokenType>
std::string ogla::BasicToken<TokenType>::lexeme() const {
    if (match.empty())
        return std::string();
    else
        return match.str();
}

template <typename TokenType>
bool ogla::BasicToken<TokenType>::operator==(const BasicToken& other) const {
    return tokenType == other.tokenType && match == other.match && pos == other.pos;
}

template <typename TokenType>
bool ogla::BasicToken<TokenType>::operator!=(const BasicToken& other) const {
    return !(*this == other);
}



/*
Convenience function that constructs and returns a `BasicToken` object.
*/
template <typename TokenType>
ogla::BasicToken<TokenType> ogla::make_token(const TokenType& tokenType, const std::smatch& match, int pos) {
    return BasicToken<TokenType>{tokenType, match, pos};
}

#endif//OGLA_TOKEN_HPP
